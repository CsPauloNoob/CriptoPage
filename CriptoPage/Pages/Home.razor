@page "/"
@using System.Globalization
@using CriptoPage.Infra
@using CriptoPage.Model
@using MudBlazor.Utilities

@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>Calculadora Bitcoin</PageTitle>
<div id="hm"></div>
<MudPaper Elevation="0"
Class="mt-14 mb-5"
Style="background-color: #111b21; color: #ffffff">
    <MudStack> 
        <MudPaper Elevation="0"
        Class="mud-theme-surface"
        Style="background-color: #111b21; color: #ffffff">
            <MudText Align="Align.Center" Typo="Typo.h3">Calcule seus ganhos com Bitcoin</MudText>
        </MudPaper>
        <MudPaper
        Elevation="0"
        Style="background-color: #111b21; color: #ffffff">
            <MudText Align="Align.Center"
            Typo="Typo.h5"
            >faça simulações precisas de compra e
                venda de bitcoin e maximize seus
                lucros com nossa calculadora inteligente
            </MudText>
        </MudPaper>
    </MudStack>


    @* box de dados da Home para telas de Medias e maiores *@
    <MudHidden Invert="true"
    Breakpoint="Breakpoint.SmAndUp">
        <MudStack Row="true"
        Justify="Justify.Center"
        Class="mt-20 d-flex"
        AlignItems="AlignItems.Center">

            @* Box 1 *@
            <MudPaper Style="background-color: #2a3b45;"
            Elevation="3"
            Height="140px"
            Width="40%"
            Class="d-flex flex-column">

                <MudStack Row="true">
                    <MudPaper
                    Elevation="0"
                    Style="background-color: #2a3b45;"
                    Width="100%"
                    Class="mt-5 mx-5 d-flex">

                        <MudIcon
                        Color="Color.Warning"
                        Icon="@Icons.Material.Rounded.CurrencyBitcoin" Size="Size.Medium"/>

                        <MudText Class="ml-2" Style="color:white">Bitcoin</MudText>

                        <MudSpacer/>
                        <MudText Typo="Typo.body1" Style="color: white;">BTC/BRL</MudText>
                    </MudPaper>

                </MudStack>

                <MudPaper
                Elevation="0"
                Style="background-color: #2a3b45;"
                Class="mt-2 mx-5">

                    <MudText Typo="Typo.h4" Style="color: white;">R$ @BtcBrlAtual</MudText>

                    <MudPaper Class="d-flex mt-1"
                    Elevation="0"
                    Style="background-color: #2a3b45;">
                        <MudIcon Icon="@ArrowIcons[IndexArrowBtc]" Color="@ArrowIndicador[IndexArrowBtc]"/>
                        <MudText Typo="Typo.subtitle1" Style="color: white;">@PorcentagemBtcDia.ToString("N2")%</MudText>
                    </MudPaper>

                </MudPaper>


            </MudPaper>

            @* Box 2 *@
            <MudPaper Style="background-color: #2a3b45;"
            Elevation="3"
            Height="140px"
            Width="40%"
            Class="d-flex flex-column ml-2">

                <MudStack Row="true">
                    <MudPaper
                    Elevation="0"
                    Style="background-color: #2a3b45;"
                    Width="100%"
                    Class="mt-5 mx-5 d-flex">

                        <MudIcon
                        Color="Color.Success"
                        Icon="@Icons.Material.Rounded.CurrencyExchange" Size="Size.Medium"/>

                        <MudText Class="ml-2" Style="color:white">Dólar</MudText>

                        <MudSpacer/>
                        <MudText Typo="Typo.body1" Style="color: white;">USD/BRL</MudText>
                    </MudPaper>

                </MudStack>

                <MudPaper
                Elevation="0"
                Style="background-color: #2a3b45;"
                Class="mt-2 mx-5">

                    <MudText Typo="Typo.h4" Style="color: white;">R$ @DolarAtual</MudText>

                    <MudPaper Class="d-flex mt-1"
                    Elevation="0"
                    Style="background-color: #2a3b45;">
                        <MudIcon Icon="@ArrowIcons[IndexArrowUsdt]" Color="@ArrowIndicador[IndexArrowUsdt]"/>
                        <MudText Typo="Typo.subtitle1" Style="color: white;">@PorcentagemUsdtDia.ToString("N2")%</MudText>
                    </MudPaper>

                </MudPaper>
            </MudPaper>
        </MudStack>
    </MudHidden>


    @* Boxes Inicial para telas pequenas *@
    <MudHidden Invert="true"
    Breakpoint="Breakpoint.Xs">
        <MudStack
        Justify="Justify.Center"
        Class="mt-20 d-flex"
        AlignItems="AlignItems.Center">

            @* Box 1 *@
            <MudPaper Style="background-color: #2a3b45;"
            Elevation="3"
            Height="140px"
            Width="70%"
            Class="d-flex flex-column">

                <MudStack Row="true">
                    <MudPaper
                    Elevation="0"
                    Style="background-color: #2a3b45;"
                    Width="100%"
                    Class="mt-5 mx-5 d-flex">

                        <MudIcon
                        Color="Color.Warning"
                        Icon="@Icons.Material.Rounded.CurrencyBitcoin" Size="Size.Medium"/>

                        <MudText Class="ml-2" Style="color:white">Bitcoin</MudText>

                        <MudSpacer/>
                        <MudText Typo="Typo.body1" Style="color: white;">BTC/BRL</MudText>
                    </MudPaper>

                </MudStack>

                <MudPaper
                Elevation="0"
                Style="background-color: #2a3b45;"
                Class="mt-2 mx-5">

                    <MudText Typo="Typo.h5" Style="color: white;">R$ @BtcBrlAtual</MudText>

                    <MudPaper Class="d-flex mt-1"
                    Elevation="0"
                    Style="background-color: #2a3b45; flex-wrap: wrap;">
                        <MudIcon Icon="@ArrowIcons[IndexArrowBtc]" Color="ArrowIndicador[IndexArrowBtc]"/>
                        <MudText Typo="Typo.subtitle1" Style="color: white;">@PorcentagemBtcDia.ToString("N2")%</MudText>
                    </MudPaper>

                </MudPaper>


            </MudPaper>

            @* Box 2 *@
            <MudPaper Style="background-color: #2a3b45;"
            Elevation="3"
            Height="140px"
            Width="70%"
            Class="d-flex flex-column mt-1">

                <MudStack Row="true">
                    <MudPaper
                    Elevation="0"
                    Style="background-color: #2a3b45;"
                    Width="100%"
                    Class="mt-5 mx-5 d-flex">

                        <MudIcon
                        Color="Color.Success"
                        Icon="@Icons.Material.Rounded.CurrencyExchange" Size="Size.Medium"/>

                        <MudText Class="ml-2" Style="color:white">Dólar</MudText>

                        <MudSpacer/>
                        <MudText Typo="Typo.body1" Style="color: white;">USD/BRL</MudText>
                    </MudPaper>

                </MudStack>

                <MudPaper
                Elevation="0"
                Style="background-color: #2a3b45;"
                Class="mt-2 mx-5">

                    <MudText Typo="Typo.h5" Style="color: white;">R$ @DolarAtual</MudText>

                    <MudPaper Class="d-flex mt-1"
                    Elevation="0"
                    Style="background-color: #2a3b45;">
                        <MudIcon Icon="@ArrowIcons[IndexArrowUsdt]" Color="@ArrowIndicador[IndexArrowUsdt]"/>
                        <MudText Typo="Typo.subtitle1" Style="color: white;">@PorcentagemUsdtDia.ToString("N2")%</MudText>
                    </MudPaper>

                </MudPaper>
            </MudPaper>
        </MudStack>
    </MudHidden>


    @* Input de calculo de histórico de investimento Para telas tablet e maiores*@
    <MudHidden Invert="true"
    Breakpoint="Breakpoint.SmAndUp">
        <div id="sm"></div>
        <MudStack Justify="Justify.Center" Row="true">

            <MudPaper Elevation="5"
            Style="background-color: #2a3b45; color: white; width: 81%"
            Class="mt-10 pb-10 d-flex align-self-center flex-grow gap-4 mb-12">

                @* Inputs *@
                <MudPaper
                Class="ml-3 mr-n8"
                Elevation="0"
                Width="47%"
                Style="background-color: #2a3b45; color: white;">

                    @* Titulo *@
                    <MudPaper
                    Elevation="0"
                    Class="mb-5 mt-8 align-self-center"
                    Style="background-color: #2a3b45; color: white;">

                        <MudText Typo="Typo.h5">Simulador de Investimentos</MudText>

                    </MudPaper>

                    <MudForm Spacing="12">

                        <MudDatePicker 
                        @bind-Date="_dataCompra"
                        Style="background: white;"
                        Color="Color.Primary"
                        Label="Data da Compra"
                        Editable="true"
                        Required="true"
                        RequiredError="Uma data válida deve ser fornecida"
                        Mask="@(new DateMask("dd/MM/yyyy"))"
                        DateFormat="dd/MM/yyyy"
                        MinDate="_minDataCompra"
                        MaxDate="_maxDateCompra"
                        Placeholder="dd/mm/yyyy"
                        Variant="Variant.Filled"/>

                        <MudDatePicker @bind-Date="_dataVenda"
                        Style="background: white;"
                        Color="Color.Primary"
                        Label="Data da Venda"
                        Required="true"
                        RequiredError="Uma data válida deve ser fornecida"
                        Editable="true"
                        Mask="@(new DateMask("dd/MM/yyyy"))"
                        DateFormat="dd/MM/yyyy"
                        Placeholder="dd/mm/yyyy"
                        MaxDate="DateTime.Now"
                        Variant="Variant.Filled"/>

                        <MudPaper Elevation="0"
                        Style="background-color: #2a3b45; color:white;"
                        Class="d-flex">
                            <MudTextField
                            @bind-Value="Result_ValorInicial"
                            Immediate="false"
                            Label="Total investido"
                            InputMode="InputMode.numeric"
                            Variant="Variant.Filled"
                            Format="N2"
                            Style="background: white; width:70%"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                            AdornmentText="@(IsBRL ? "R$" : "BTC")"
                            Culture="@(new CultureInfo("de-DE"))"/>

                            <MudText Class="pt-2" Align="Align.Center">BTC</MudText>

                            <MudSwitch Label="BRL"
                            UncheckedColor="Color.Warning"
                            Color="Color.Success"
                            Size="Size.Medium"
                            T="bool"
                            @bind-Value="IsBRL"/>
                        </MudPaper>

                        <MudButton
                        OnClick="CalcularGanhos"
                        Size="Size.Medium"
                        Variant="Variant.Filled"
                        Style="background-color: darkgoldenrod; color: black">Calcular Ganhos
                        </MudButton>
                    </MudForm>

                </MudPaper>

                @* Tela de Resultados *@
                <MudPaper Elevation="5"
                Class="ml-13 mr-5 mt-8"
                Style="background-color: #2a3b45; color: white;"
                Width="50%">

                    <MudPaper
                    Elevation="0"
                    Class="ml-3 mb-5 align-self-center"
                    Style="background-color: inherit; color: white;">

                        <MudText Typo="Typo.h5">Resultado da Simulação</MudText>

                        <MudPaper Elevation="0"
                        Class="ml-3"
                        Style="background-color: inherit">

                            <MudStack
                            Spacing="5"
                            Style="color: white" Class="mr-3 mt-8">
                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Valor Inicial</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="background-color: inherit">@ResultVI</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Valor Final</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="background-color: inherit">@ResultVF</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Lucro/Prejuízo</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="@($"color: {color};")">@DiferenceResult</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Rentabilidade</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="@($"color: {color};")">@Rentabilidade</MudText>
                                </MudPaper>

                                @* <MudTextField *@
                                @*     @bind-Value="ResultVI" *@
                                @*     Style="background-color: #111b21;" *@
                                @*     Variant="Variant.Filled" *@
                                @*     Label="Valor Inicial" *@
                                @*     ShrinkLabel="true" *@
                                @*     ReadOnly="true"/> *@
                                @* *@
                                @* <MudTextField *@
                                @*     Value="ResultVF" *@
                                @*     Style="background-color: white" *@
                                @*     Variant="Variant.Filled" *@
                                @*     AdornmentColor="Color.Dark" *@
                                @*     Label="Valor Final" *@
                                @*     ShrinkLabel="true" *@
                                @*     ReadOnly="true" *@
                                @*     T="string"/> *@
                                @* *@
                                @* <MudTextField *@
                                @*     Variant="Variant.Filled" *@
                                @*     Style="@($"background-color: white; color: {color};")" *@
                                @*     Label="Lucro/Prejuízo" *@
                                @*     Value="DiferenceResult" *@
                                @*     ShrinkLabel="true" *@
                                @*     ReadOnly="true" *@
                                @*     T="string"/> *@
                                @* *@
                                @* <MudTextField *@
                                @*     Variant="Variant.Filled" *@
                                @*     Style="@($"background-color: white; color: {color};")" *@
                                @*     Label="Rentabilidade" *@
                                @*     Value="Rentabilidade" *@
                                @*     ShrinkLabel="true" *@
                                @*     ReadOnly="true" *@
                                @*     T="string"/> *@

                                <MudText Class="mb-n2">Variação no Período</MudText>

                                <MudProgressLinear
                                Style="background-color: white; height: 24px;"
                                Rounded="true"
                                Color="ProgressColor"
                                Size="Size.Large"
                                Value="(double)Percent_LucroPrej">
                                    <MudText
                                    Typo="Typo.subtitle1"
                                    Color="Color.Dark">

                                        @Percent_LucroPrej.ToString("N2")%

                                    </MudText>

                                </MudProgressLinear>
                            </MudStack>

                        </MudPaper>

                    </MudPaper>


                </MudPaper>

            </MudPaper>

        </MudStack>

    </MudHidden>

    @* Input de calculo de histórico de investimento Para telas pequenas *@
    <MudHidden Invert="true"
    Breakpoint="Breakpoint.Xs">
        <div id="sm"></div>
        <MudStack Justify="Justify.Center">

            <MudPaper Elevation="5"
            Style="background-color: #2a3b45; color: white; width: 100%"
            Class="mt-10 pb-10 align-self-center flex-grow gap-4 mb-12">

                @* Inputs *@
                <MudPaper Class="ml-3"
                Elevation="0"
                Width="90%"
                Style="background-color: #2a3b45; color: white;">

                    @* Titulo *@
                    <MudPaper Elevation="0"
                    Width="100%"
                    Class="mb-5 mt-8 align-self-center"
                    Style="background-color: #2a3b45; color: white;">

                        <MudText Typo="Typo.h5">Simulador de Investimentos</MudText>

                    </MudPaper>

                    <MudForm Spacing="12">

                        <MudDatePicker @bind-Date="_dataCompra"
                        Style="background: white;"
                        Color="Color.Primary"
                        Label="Data da Compra"
                        Required="true"
                        RequiredError="Uma data válida deve ser fornecida"
                        DateFormat="dd.MM.yyyy"
                        MinDate="_minDataCompra"
                        MaxDate="_maxDateCompra"
                        Placeholder="dd.mm.yyyy"
                        Variant="Variant.Filled" />

                        <MudDatePicker @bind-Date="_dataVenda"
                        Style="background: white;"
                        Color="Color.Primary"
                        Label="Data da Venda"
                        Required="true"
                        RequiredError="Uma data válida deve ser fornecida"
                        DateFormat="dd.MM.yyyy"
                        Placeholder="dd.mm.yyyy"
                        MaxDate="DateTime.Now"
                        Variant="Variant.Filled" />

                        <MudPaper Elevation="0" Width="100%"
                        Style="background-color: #2a3b45; color:white;"
                        Class="d-flex">
                            <MudTextField
                            @bind-Value="Result_ValorInicial"
                            Immediate="false"
                            Label="Total investido"
                            InputMode="InputMode.numeric"
                            Variant="Variant.Filled"
                            Format="N2"
                            Style="background: white; width:70%"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                            AdornmentText="@(IsBRL ? "R$" : "BTC")"
                            Culture="@(new CultureInfo("de-DE"))"/>

                            <MudText Class="pt-2" Align="Align.Center">BTC</MudText>
                            <MudSwitch Label="BRL"
                            UncheckedColor="Color.Warning"
                            Color="Color.Success"
                            Size="Size.Medium"
                            T="bool"
                            @bind-Value="IsBRL" />
                        </MudPaper>

                        <MudButton OnClick="CalcularGanhos"
                        Size="Size.Medium"
                        Variant="Variant.Filled"
                        Style="background-color: darkgoldenrod; color: black">
                            Calcular Ganhos
                        </MudButton>
                    </MudForm>

                </MudPaper>

                @* Tela de Resultados *@
                <MudPaper Elevation="5"
                Class="ml-3 mr-5 mt-8"
                Style="background-color: #2a3b45; color: white;"
                Width="90%">

                    <MudPaper Elevation="0"
                    Class="ml-3 mb-5 align-self-center"
                    Style="background-color: inherit; color: white;">

                        <MudText Typo="Typo.h5">Resultado da Simulação</MudText>

                        <MudPaper Elevation="0"
                        Class="ml-3"
                        Style="background-color: inherit">

                            <MudStack Spacing="5"
                            Style="color: white" Class="mr-3 mt-8">

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Valor Inicial</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="background-color: inherit">@ResultVI</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Valor Final</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="background-color: inherit">@ResultVF</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Lucro/Prejuízo</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="@($"color: {color};")">@DiferenceResult</MudText>
                                </MudPaper>

                                <MudPaper Class="d-flex align-center" Width="100%" Height="45px" Style="color: white; background-color: #111b21">
                                    <MudText Class="pl-2" Align="Align.Left" Style="background-color: inherit">Rentabilidade</MudText>
                                    <MudSpacer/>
                                    <MudText Class="pr-2" Align="Align.End" Style="@($"color: {color};")">@Rentabilidade</MudText>
                                </MudPaper>


                                @* <MudTextField @bind-Value="ResultVI" *@
                                @* Style="background-color: white" *@
                                @* Variant="Variant.Filled" *@
                                @* Label="Valor Inicial" *@
                                @* ShrinkLabel="true" *@
                                @* ReadOnly="true" /> *@
                                @* *@
                                @* <MudTextField Value="ResultVF" *@
                                @* Style="background-color: white" *@
                                @* Variant="Variant.Filled" *@
                                @* AdornmentColor="Color.Dark" *@
                                @* Label="Valor Final" *@
                                @* ShrinkLabel="true" *@
                                @* ReadOnly="true" *@
                                @* T="string" /> *@

                                @* <MudTextField Variant="Variant.Filled" *@
                                @* Style="@($"background-color: white; color: {color};")" *@
                                @* Label="Lucro/Prejuízo" *@
                                @* Value="DiferenceResult" *@
                                @* ShrinkLabel="true" *@
                                @* ReadOnly="true" *@
                                @* T="string" /> *@
                                @* *@
                                @* <MudTextField Variant="Variant.Filled" *@
                                @* Style="@($"background-color: white; color: {color};")" *@
                                @* Label="Rentabilidade" *@
                                @* Value="Rentabilidade" *@
                                @* ShrinkLabel="true" *@
                                @* ReadOnly="true" *@
                                @* T="string" /> *@

                                <MudText Class="mb-n2">Variação no Período</MudText>

                                <MudProgressLinear Style="background-color: white; height: 24px;"
                                Rounded="true"
                                Color="ProgressColor"
                                Size="Size.Large"
                                Value="(double)Percent_LucroPrej">
                                    <MudText Typo="Typo.subtitle1"
                                    Color="Color.Dark">

                                        @Percent_LucroPrej.ToString("N2")%

                                    </MudText>

                                </MudProgressLinear>
                            </MudStack>

                        </MudPaper>

                    </MudPaper>


                </MudPaper>

            </MudPaper>

        </MudStack>

    </MudHidden>

    @* Sessão de contato *@
    <MudPaper Class="mt-20 py-20 mb-n5 justify-center" Style="height: 100%; background-color: #2a3b45; color:  white; justify-content: center; text-align: center;">
        <div id="ctt"></div>

        <MudText Class="mt-n10" Align="Align.Center"
        Typo="Typo.h4">
            Precisa de Ajuda com seus investimentos?
        </MudText>

        <MudPaper Class="mx-16 mt-4"
        Elevation="0"
        Style="background-color: #2a3b45; 
                  color:  white;">
            <MudText Align="Align.Center">Fale com nossos especialistas via WhatsApp e receba orientações personalizadas</MudText>
        </MudPaper>

        <MudButton Class="mt-10"
        StartIcon="@Icons.Custom.Brands.WhatsApp"
        Variant="Variant.Filled"
        Style="background-color: #25D366; color: white; margin: 0 auto;">
            Conversar no WhatsApp
        </MudButton>
    </MudPaper>

</MudPaper>

@code
{
    private List<CoinData> coins;

    //Cotacao (Media)
    private Dictionary<int, double> CotacaoAnterior = new Dictionary<int, double>
    {
        { 2013, 2.1701 },
        { 2014, 2.3867 },
        { 2015, 3.3911 },
        { 2016, 3.4814 },
        { 2017, 3.1998 },
        { 2018, 3.6236 },
        { 2019, 3.9174 },
        { 2020, 5.1426 },
        { 2021, 5.3093 },
        { 2022, 5.2318 },
        { 2023, 5.0124 },
        { 2024, 5.2664 }
    };

    string BtcBrlAtual = string.Empty;
    string DolarAtual = string.Empty;
    double PorcentagemBtcDia = 0;
    double PorcentagemUsdtDia = 0;
    Color[] ArrowIndicador = new Color[] { Color.Success, Color.Error };
    int IndexArrowBtc;
    int IndexArrowUsdt;
    string[] ArrowIcons = new string[] { Icons.Material.Rounded.ArrowUpward, Icons.Material.Rounded.ArrowDownward };

    DateTime? _dataCompra = null;
    DateTime? _dataVenda = null;
    DateTime ApiMinDate = new DateTime(2021, 7, 06);
    DateTime _maxDateCompra = DateTime.Now.AddDays(-1);
    DateTime _minDataCompra = new DateTime(2013, 4, 29);

    bool IsBRL { get; set; } = true;

    double Result_ValorInicial = 1;
    double Result_ValorFinal;
    string DiferenceResult = string.Empty;
    string Rentabilidade = string.Empty;

    int _random;

    string ResultVI = string.Empty;
    string ResultVF = string.Empty;

    Color ProgressColor = Color.Primary;
    MudColor color = new PaletteLight().Error; //Para Txts de moeda e lucro ou prejuizo. 
    string ActualCurrency;

    string[] Currency = new string[] { "USDT", "BRL" };

    decimal Percent_LucroPrej;

    async Task CalcularGanhos()
    {
        if (Result_ValorInicial < 0 || !ValidarCampos())
        {
            return;
        }

        double ganhos = 0;

        if (_dataCompra > ApiMinDate || _dataVenda > ApiMinDate)
        { 
            ganhos = await CalcularGanhosViaApi(_dataCompra.Value, _dataVenda.Value);
        }

        else
            ganhos = CalcularGanhosNoIntervaloCsv(_dataCompra.Value, _dataVenda.Value);

        ParseResults();
        double auxResultVI = double.Parse(ResultVI);

        if (ganhos > 0 && ganhos < auxResultVI)
        {
            AtualizarResultados(ganhos, new PaletteLight().Error);
        }

        else if (ganhos > 0 && ganhos > auxResultVI)
        {
            AtualizarResultados(ganhos, new PaletteLight().Success);
        }

        if (ganhos <= 0)
            Result_ValorFinal = 0;
        else
        {
            AjustarMoedas();
            CalcularPorcentagem();
            AjustarCorResultados();
        }
    }



    double CalcularGanhosNoIntervaloCsv(DateTime dataCompra, DateTime dataVenda)
    {

        double valorFinalBRL = 0;
        var dadosCompra = coins.FirstOrDefault(c => c.Date == dataCompra);
        var dadosVenda = coins.FirstOrDefault(c => c.Date == dataVenda);

        var cotacaoCompra = CotacaoAnterior.ContainsKey(dadosCompra.Date.Year) ? CotacaoAnterior[dadosCompra.Date.Year] : 1;
        var cotacaoVenda = CotacaoAnterior.ContainsKey(dadosVenda.Date.Year) ? CotacaoAnterior[dadosVenda.Date.Year] : 1;

        if (dadosCompra == null || dadosVenda == null)
            return 0;

        if (IsBRL)
        {
            ResultVI = Result_ValorInicial.ToString("N2");
            // Converter R$ para USD com a cotação da data da compra
            double valorEmUSD = Result_ValorInicial / cotacaoCompra;

            // Calcular fração de BTC comprada
            double quantidadeBTC = valorEmUSD / dadosCompra.Last_Price_Data;

            // Valor de venda em USD
            double valorFinalUSD = quantidadeBTC * dadosVenda.Last_Price_Data;

            // Converter para BRL com cotação da venda
            valorFinalBRL = valorFinalUSD * cotacaoVenda;
        }

        else  //Implementação de calculo de btc para real
        {
            //calcula quanto a qtde de btc csuta em dolar
            double btcValorUsdCompra = dadosCompra.Last_Price_Data * Result_ValorInicial;
            
            //Converte para BRL
            double btcValorBrlCompra = btcValorUsdCompra * cotacaoCompra;

            double btcValorUsdVenda = dadosVenda.Last_Price_Data * Result_ValorInicial;

            double btcValorBrlVenda = btcValorUsdVenda * cotacaoVenda;
            
            ResultVI = btcValorBrlCompra.ToString("N2");
            valorFinalBRL = btcValorBrlVenda;

        }
        
        return valorFinalBRL;
    }


    async Task<double> CalcularGanhosViaApi(DateTime dataCompra, DateTime dataVenda)
    {
        double valorFinalBRL = 0;
        CoinData dadosCompra;
        double quantidadeBtc = 0;

        CoinData dadosVenda;

        // Se dataVenda for posterior à ApiMinDate, buscar na API
        if (dataVenda >= ApiMinDate)
        {
            dadosVenda = await BinanceApiService.CotacaoBtcDataEspecifica(dataVenda);
        }
        else
        {
            dadosVenda = coins.FirstOrDefault(c => c.Date.Date == dataVenda.Date);
        }

        // Se dados de venda não forem encontrados, não há como calcular
        if (dadosVenda == null)
            return 0;

        // Caso 1: Compra via API (dados recentes)
        if (dataCompra >= ApiMinDate)
        {
            dadosCompra = await BinanceApiService.CotacaoBtcDataEspecifica(dataCompra);

            if (dadosCompra != null)
            {
                quantidadeBtc = Result_ValorInicial / dadosCompra.Last_Price_Data;
                valorFinalBRL = quantidadeBtc * dadosVenda.Last_Price_Data;
            }
        }
        // Caso 2: Compra com dados históricos (anteriores à API)
        else
        {
            dadosCompra = coins.FirstOrDefault(c => c.Date.Date == dataCompra.Date);

            if (dadosCompra != null)
            {
                var cotacaoCompra = CotacaoAnterior.ContainsKey(dadosCompra.Date.Year)
                    ? CotacaoAnterior[dadosCompra.Date.Year]
                    : 1;

                double valorEmUSD = Result_ValorInicial / cotacaoCompra;

                quantidadeBtc = valorEmUSD / dadosCompra.Last_Price_Data;

                // dadosVenda pode ser tanto da API quanto da lista, mas já está tratado acima
                valorFinalBRL = quantidadeBtc * dadosVenda.Last_Price_Data;
            }
        }

        return valorFinalBRL;
    }

    // async Task<double> CalcularGanhosViaApi(DateTime dataCompra, DateTime dataVenda)
    // {
    //     double valorFinalBRL = 0;
    //     CoinData dadosCompra;
    //     double quantidadeBtc = 0;

    //     var dadosVenda = await BinanceApiService.CotacaoBtcDataEspecifica(dataVenda); // Já em BRL

    //     if (dataCompra >= ApiMinDate)
    //     {
    //         // Valor da API já em BRL
    //         dadosCompra = await BinanceApiService.CotacaoBtcDataEspecifica(dataCompra);

    //         if (dadosCompra != null)
    //         {
    //             // Calcula qtde de BTC comprada com o valor inicial (em BRL)
    //             quantidadeBtc = Result_ValorInicial / dadosCompra.Last_Price_Data;

    //             // Valor da venda (em BRL)
    //             valorFinalBRL = quantidadeBtc * dadosVenda.Last_Price_Data;
    //         }
    //     }
    //     else // Cenário onde a data é anterior à ApiMinDate: usa dados históricos
    //     {
    //         dadosCompra = coins.FirstOrDefault(c => c.Date.Date == dataCompra.Date);

    //         if (dadosCompra != null)
    //         {
    //             // Pega a cotação do dólar na data de compra
    //             var cotacaoCompra = CotacaoAnterior.ContainsKey(dadosCompra.Date.Year)
    //                 ? CotacaoAnterior[dadosCompra.Date.Year]
    //                 : 1;

    //             // Converte BRL para USD
    //             double valorEmUSD = Result_ValorInicial / cotacaoCompra;

    //             // Calcula quanto de BTC conseguiria comprar
    //             quantidadeBtc = valorEmUSD / dadosCompra.Last_Price_Data;

    //             // Valor da venda (em BRL, já que a API retorna em BRL)
    //             valorFinalBRL = quantidadeBtc * dadosVenda.Last_Price_Data;
    //         }
    //     }

    //     return valorFinalBRL;
    // }


    void CalcularPorcentagem()
    {
        if (Result_ValorInicial == 0)
        {
            Percent_LucroPrej = 0;

        }
        else
        {
            if(IsBRL)
                Percent_LucroPrej = (decimal)((Result_ValorFinal - Result_ValorInicial) / Result_ValorInicial) * 100;

            else
            {
                var resultValorInicial = double.Parse(ResultVI);
                Percent_LucroPrej = (decimal)((Result_ValorFinal - resultValorInicial) / resultValorInicial) * 100;
            }
        }
    }

    void AjustarCorResultados()
    {
        if(Percent_LucroPrej == 0)
            ProgressColor = Color.Primary;

        if (Percent_LucroPrej > 0)
        {
            Rentabilidade = $"+{Percent_LucroPrej:N2}%";
            ProgressColor = Color.Success;
        }
        else
        {
            Rentabilidade = $"{Percent_LucroPrej:N2}%";
            ProgressColor = Color.Error;
        }
    }


    void AjustarMoedas()
    {
        ActualCurrency = "R$ ";

        ResultVF = ActualCurrency + Result_ValorFinal.ToString("N2");
        ResultVI = IsBRL ? 
            ActualCurrency + Result_ValorInicial.ToString("N2") : 
            ResultVI;
        DiferenceResult = ActualCurrency + DiferenceResult;
    }

    void ParseResults()
    {
        if (!double.TryParse(ResultVF, out Result_ValorFinal))
        {
            ResultVF = "Valor final inválido";
        }
    }


    protected async override Task OnInitializedAsync()
    {
        var csvText = await Http.GetStringAsync("data/coin_Bitcoin.csv");
        coins = ParseCsv(csvText);

        await GetBtcPriceAndStats();
        await GetUsdtPriceAndStats();
        AjusteIndicadorArrow();

        await base.OnInitializedAsync();
    }


    bool ValidarCampos()
    {
        if(Result_ValorInicial == 0)
        {
            ShowErrorSnackbar("Insira um valor válido");
            return false;
        }

        if (_dataCompra == null || _dataVenda == null)
        {
            ShowErrorSnackbar("Data de compra e venda são obrigatórias");
            return false;
        }

        else if (_dataCompra == _dataVenda)
        {
            ShowErrorSnackbar("As datas não podem ser iguais");
            return false;
        }

        else if(_dataCompra > _dataVenda)
        {
            ShowErrorSnackbar("A data de compra não pode ser maior que a data de venda");
            return false;
        }

        if (_dataCompra > _maxDateCompra || _dataCompra < _minDataCompra)
        {
            ShowErrorSnackbar("Data de compra inválida");
            return false;
        }

        if (_dataVenda > DateTime.Now)
        {
            ShowErrorSnackbar("Data de venda inválida");
            return false;
        }

        return true;
    }

    void AtualizarResultados(double valorFinal, MudColor cor)
    {
        double parsadoResultVi = double.Parse(ResultVI);

        DiferenceResult = (valorFinal - parsadoResultVi).ToString("N2");
        Result_ValorFinal = valorFinal;
        color = cor;
    }

    async Task GetBtcPriceAndStats()
    {
        var btc = await BinanceApiService.BtcCotacaoDiaria();

        BtcBrlAtual = btc.Last_Price_Data.ToString("N2");
        PorcentagemBtcDia = btc.PercentVariation;

    }

    async Task GetUsdtPriceAndStats()
    {
        var real = await BinanceApiService.CotacaoRealUsdt();

        DolarAtual = real.Last_Price_Data.ToString("N2");
        PorcentagemUsdtDia = real.PercentVariation;
    }

    void AjusteIndicadorArrow()
    {
        IndexArrowBtc = PorcentagemBtcDia > 0 ? 0 : 1;

        IndexArrowUsdt = PorcentagemUsdtDia > 0 ? 0 : 1;
    }

    void ShowErrorSnackbar(string message)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add(message, Severity.Error);
    }


    private List<CoinData> ParseCsv(string csv)
    {
        var result = new List<CoinData>();
        var lines = csv.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        for (int i = 1; i < lines.Length; i++)
        {
            var parts = lines[i].Split(',', StringSplitOptions.TrimEntries);

            if (parts.Length < 8)
                continue;

            try
            {
                var date = DateTime.ParseExact(parts[3], "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture).Date;
                var open = double.Parse(parts[6], CultureInfo.InvariantCulture);
                var close = double.Parse(parts[7], CultureInfo.InvariantCulture);

                result.Add(new CoinData
                    {
                        Name = "Bitcoin",
                        Symbol = "BTC",
                        Date = date,
                        FirstDayPrice = open,
                        Last_Price_Data = close
                    });
            }
            catch
            {
                // Ignorar linha mal formatada
            }
        }

        return result;
    }
}